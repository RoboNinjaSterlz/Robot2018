// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2016.robot2018.subsystems;

import org.usfirst.frc2016.robot2018.Robot;
import org.usfirst.frc2016.robot2018.RobotMap;
import org.usfirst.frc2016.robot2018.commands.*;

import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;







import com.ctre.phoenix.motorcontrol.ControlMode;
import com.ctre.phoenix.motorcontrol.FeedbackDevice;
import com.ctre.phoenix.motorcontrol.LimitSwitchNormal;
import com.ctre.phoenix.motorcontrol.LimitSwitchSource;
import com.ctre.phoenix.motorcontrol.NeutralMode;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.ctre.phoenix.motorcontrol.can.WPI_TalonSRX;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 *
 */
public class Arm extends Subsystem {
private boolean didWeMove=true;
	
	public double presetPositions[] = new double[4];
	private final String ARMMOTOR = "Arm Motor";
	private final String ARMPOSITION = "Arm Position";
	private final String ARMPOSITIONERROR = "Arm Position Error";
	private final String ARMPRESETPOSITION = "Arm Position Preset";
	// Desired encoder count for positioning the armTaloner.
	private double desiredPosition = 0;
	
	// keeps track of when the armTalon is calibrated
	private boolean needsCalibrate;
	private int lastPreset;
	// How good does the position need to be
	private final double AbsoluteTolerance = 3;
	
	// Labels for presets in robot prefs on dashboard
	public final String[] ArmPositionLabels = { 
		"Low",
		"Medium",
		"High"
	};
	
	public final int
		LOW = 0,
		MEDIUM = 1,
		HIGH = 2;
	
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final WPI_TalonSRX armTalon = RobotMap.armarmTalon;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS


    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public Arm() {
    	presetPositions[MEDIUM]=1500;
    	needsCalibrate = true;
    	armTalon.configSelectedFeedbackSensor(FeedbackDevice.CTRE_MagEncoder_Absolute , 0, 0);
    	armTalon.setSensorPhase(true); //!!!! Check this !!!!!
    	armTalon.setInverted(false);
    	armTalon.configAllowableClosedloopError(0, 0, 0);
    	// Keep off until we are calibrated.
    	// Hard limits should protect everything.
    	armTalon.configForwardLimitSwitchSource(
    			LimitSwitchSource.FeedbackConnector,
    			LimitSwitchNormal.NormallyOpen, 0);
    	armTalon.configReverseLimitSwitchSource(
    			LimitSwitchSource.FeedbackConnector,
    			LimitSwitchNormal.NormallyOpen, 0);
    	armTalon.configForwardSoftLimitThreshold(0, 0);
    	armTalon.configForwardSoftLimitEnable(false, 0);
    	armTalon.configReverseSoftLimitThreshold(2500, 0);
    	armTalon.configReverseSoftLimitEnable(false, 0);
    	armTalon.clearStickyFaults(0);
    	armTalon.setIntegralAccumulator(0, 0, 0);
    	armTalon.setNeutralMode(NeutralMode.Brake);
    	armTalon.set(ControlMode.Position, presetPositions[HIGH]); 
    	}


    	// Returns true if the GearArm is in the home position
    	public boolean isArmAtHome() {
    		return (armTalon.getSensorCollection().isRevLimitSwitchClosed());
        }

    	// Goes to the encoder count that is passed
        public void goTo(double height) {
    		desiredPosition = height;
    		if (Robot.robotIsCalibrated) {
    			armTalon.set(height);
    		}
    		//armTalon.enableControl();
        	}
        public void goToPreset(int position) {
        	
        	didWeMove = false;
        	if ((position >= 0) && (position <= presetPositions.length - 1)) {
        		if (Math.abs(presetPositions[position] - desiredPosition) > AbsoluteTolerance ) {
        			didWeMove=true;
        		}
        		goTo(presetPositions[position]);
        		lastPreset=position;
          	}
        }
    	public void incrementHeight() {
    		desiredPosition++;
    		goTo(desiredPosition);
    	}
    	
    	public void decrementHeight() {
    		desiredPosition--;
    		goTo(desiredPosition);
    	}
    	
    	public void adjustHeight( double adjust) {
    		desiredPosition+=adjust;
    		if (desiredPosition < 0) {
    			desiredPosition = 0;
    		}
    		goTo(desiredPosition);
    	}	
    	
    	// Returns true of the armTalon is at the desired position (done moving)
    	public boolean isPositioned() {
    		double position;
    		position = Math.abs(desiredPosition - getPosition());
    		if (desiredPosition == 0 && armTalon.getSensorCollection().isRevLimitSwitchClosed()) {
        		armTalon.set(ControlMode.Position, 0);
    		}
    		return (position <= AbsoluteTolerance);
/*    		position = gearArmTalon.getClosedLoopError();
    		return (AbsoluteTolerance >= Math.abs(position));
*/
    		}
    	
    	// Returns the current postion error
    	public int getPositionError() {
    		return armTalon.getClosedLoopError(0);
    	}

    	// Returns the current position
    	public int getPosition() {
    		return (int) armTalon.getSelectedSensorPosition(0);
    	}
    	
    	public boolean ArmMoved() {
    		return (didWeMove);
    	}
    	
    	
    	// Return the position by number
    	public int currentPreset() {
    		if (isPositioned()) {
    			return lastPreset;
    		}
    		else {
    			return -1;
    		}
    	}
    
    	// mostly for debugging updates the smart dashboard with position info
    	public void periodic() {
    		SmartDashboard.putNumber("armTalon Desired Pos", armTalon.getClosedLoopTarget(0));
    		SmartDashboard.putNumber("GearArm Position", getPosition());
    		SmartDashboard.putNumber("GearArm Position Error", getPositionError());
    		SmartDashboard.putBoolean("Arm is Positioned", isPositioned());
    		//SmartDashboard.putBoolean("Did Move",shooterMoved());
//    		SmartDashboard.putBoolean("limit sensor", shooterLowerLimit.get());
    		if (lastPreset == HIGH) {
    			double joyY = Robot.oi.operatorJoy.getY();
    		
        	if (Math.abs(joyY) <.05) {
        		joyY = 0;
        	}
        	double position = presetPositions[HIGH]+joyY*1620/13;
        	
        	goTo(position);
        	
    	}
    	}
    	
    	public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
    		
    }
    	public void addTelemetryHeaders() {
    		Robot.currentMonitor.registerMonitorDevive(armTalon, ARMMOTOR);
    		Robot.telem.addColumn(ARMPOSITION);
    		Robot.telem.addColumn(ARMPOSITIONERROR);
    		Robot.telem.addColumn(ARMPRESETPOSITION);
    	}

    	public void writeTelemetyValues() {
    		Robot.telem.saveDouble(ARMPOSITION,getPosition());
    		Robot.telem.saveDouble(ARMPOSITIONERROR, getPositionError());
    		Robot.telem.saveInteger(ARMPRESETPOSITION, lastPreset);
    	}
}

