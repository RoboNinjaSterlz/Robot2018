// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2016.robot2018.commands;
import edu.wpi.first.wpilibj.command.Command;

import org.usfirst.frc2016.robot2018.Robot;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;

/**
 *
 */
public class DriveUsingFile2 extends Command {
	private String sp_FileName= "centermove.csv";    /** Default: centermove.csv */
	private String sp_FilePath= "/c";				/** Default: /c folder. */
	private final String csvSplitBy = ",";
	private Integer line = 0; 
	private BufferedReader in;
	private boolean failed = false;
	private boolean finished = false;

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
	public DriveUsingFile2() {

		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
		requires(Robot.driveTrainSRX);

		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	}

	// Called just before this Command runs the first time
	@Override
	protected void initialize() {
		System.out.println("MoveUsingFile(): INFO: Loading points from file [" + this.sp_FileName + "]");

		try{
			in = new BufferedReader(new FileReader(this.sp_FilePath+"/"+this.sp_FileName));
			String str;
			while ((str = in.readLine()) != null){
				line ++;
				str = str.trim();
				if(str.length() == 0 || str.charAt(0) == '#')
					continue;
				// Now we have a valid first point
				break;
			}
			// break it up 
			String[] fields = str.split(csvSplitBy);

			if (fields.length < 2){
				System.out.println("DriveUsingFile: ****ERROR Line " + line.toString() + " is not a comment (#) but does not have a pipe ("+csvSplitBy+") delimiter!");
				failed=true;
			}
			if (str !=null) {
				int leftDistance = Integer.parseInt(fields[0]);
				int rightDistance = Integer.parseInt(fields[1]);
				if (Robot.gameData == 'R') {
					Robot.driveTrainSRX.goToUsingMM(leftDistance, rightDistance);
				}
				else {
					Robot.driveTrainSRX.goToUsingMM(rightDistance, leftDistance);
				}
			}
			else {
				finished=true;
			}
		} catch (IOException e) {
			System.out.println("DriveUsingFile(): ****ERROR: Failed to load the file " + this.sp_FileName + 
					"   Exception:" + e + "  Reason:" + e.getMessage() );
			failed = true;
		}


	}

	// Called repeatedly when this Command is scheduled to run
	@Override
	protected void execute() {
		String str;
		try{
			while ((str = in.readLine()) != null){
				line ++;
				str = str.trim();
				if(str.length() == 0 || str.charAt(0) == '#')
					continue;
				// Now we have a valid first point
				break;
			}
			// break it up 
			String[] fields = str.split(csvSplitBy);

			if (fields.length < 2){
				System.out.println("DriveUsingFile: ****ERROR Line " + line.toString() + " is not a comment (#) but does not have a pipe ("+csvSplitBy+") delimiter!");
				failed=true;
			}
			if (str !=null) {
				int leftDistance = Integer.parseInt(fields[0]);
				int rightDistance = Integer.parseInt(fields[1]);
				if (Robot.gameData == 'R') {
					Robot.driveTrainSRX.goToUsingMM(leftDistance, rightDistance);
				}
				else {
					Robot.driveTrainSRX.goToUsingMM(rightDistance, leftDistance);
				}
			}
			else {
				finished=true;
			}
		} catch (IOException e) {
			System.out.println("DriveUsingFile(): ****ERROR: Failed to load the file " + this.sp_FileName + 
					"   Exception:" + e + "  Reason:" + e.getMessage() );
			failed = true;
		}
	}

	// Make this return true when this Command no longer needs to run execute()
	@Override
	protected boolean isFinished() {
		return (false || finished);
	}

	// Called once after isFinished returns true
	@Override
	protected void end() {
	}

	// Called when another command which requires one or more of the same
	// subsystems is scheduled to run
	@Override
	protected void interrupted() {
	}
}
