// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2016.robot2018.commands;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import org.usfirst.frc2016.robot2018.Robot;

/**
 *
 */
public class CameraDrive extends Command {
	private final double DRIVESPEED = -.45;
	private final double ERROR_MULTIPLIER = .0001;
	private double targetCorrection;
	private double lEncoderStart, rEncoderStart;
	private double m_distance;


    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public CameraDrive(double distance) {
    	m_distance=distance;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    protected void initialize() {
    	lEncoderStart = Robot.driveTrainSRX.getLeftEncoder();
    	rEncoderStart = Robot.driveTrainSRX.getRightEncoder();
    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
    	// Get steering error from PI
    	targetCorrection = SmartDashboard.getNumber("GearAlignTargetCorrection", -255);
    	if (targetCorrection != -255) {
    		Robot.driveTrainSRX.arcadeDrive(DRIVESPEED, targetCorrection*ERROR_MULTIPLIER);
    	}
    	else {
    		// for now drive straight should alert the drivers!!
    		Robot.driveTrainSRX.arcadeDrive(DRIVESPEED, 0);
    	}
    }

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
    	if ( m_distance !=0 ) {
    		return(m_distance <= Math.abs((Robot.driveTrainSRX.getRightEncoder() - rEncoderStart)));
    	}
    	else {
    		return false;
    	}

    }

    // Called once after isFinished returns true
    protected void end() {
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    }
}
