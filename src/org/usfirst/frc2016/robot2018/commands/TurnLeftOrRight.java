// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2016.robot2018.commands;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import org.usfirst.frc2016.robot2018.Robot;

/**
 *
 */
public class TurnLeftOrRight extends Command {
	private int waitCounter;
	private final double DELAYPERCOUNT = .02;
	private final double TIME2WAIT = .75;
	private double turnDirection;
	private final double m_seconds = 5;

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
	private boolean m_matchGameData;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public TurnLeftOrRight(boolean matchGameData) {
    	m_matchGameData = matchGameData;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.driveTrainSRX);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    @Override
    protected void initialize() {
    	waitCounter = 0;	// Reset the timer
    	if (Robot.gameData == 'R') {
    		turnDirection = +90;
    	}
    	else {
    		turnDirection = -90;
    	}
    SmartDashboard.putNumber("Turnornot angle",turnDirection);
    }

    // Called repeatedly when this Command is scheduled to run
    @Override
    protected void execute() {
    	waitCounter++;

    	double steer =  (Robot.gyro.getAngle() - turnDirection);
    	if (steer > 180) {
    		steer = steer - 360;
    	}
    	else if (steer < -180) {
    		steer = steer + 360;
    	}
    	steer *= -Robot.gyro.gyroP;
    	
    	if (steer > Robot.gyro.TURN_MAX) {
    		steer = Robot.gyro.TURN_MAX;
    	}
    	else if (steer < -Robot.gyro.TURN_MAX) {
    		steer = -Robot.gyro.TURN_MAX;
    	}
        Robot.driveTrainSRX.arcadeDrive(0, steer);
    }

    // Make this return true when this Command no longer needs to run execute()
    @Override
    protected boolean isFinished() {
    	boolean done = false;
   		done = (Math.abs((Robot.gyro.getAngle() - turnDirection)) < 1) ;
    	
    	if (!done) {
    		done = (waitCounter >= (int)(m_seconds/DELAYPERCOUNT));
    	}
    	return done;
    }

    // Called once after isFinished returns true
    @Override
    protected void end() {
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    @Override
    protected void interrupted() {
    }
}
