// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2016.robot2018.commands;
import edu.wpi.first.wpilibj.command.Command;
import org.usfirst.frc2016.robot2018.Robot;

/**
 *
 */
public class TestArcDrive extends Command {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
    private double m_leftDistance;
    private double m_rightDistance;
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
    private boolean useOldMethods;
    private boolean startSequence;
    private int cruiseVel;
    private int accel;
    private int endMoveLimit;
    
    
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public TestArcDrive(int leftDistance, int rightDistance) {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        m_leftDistance = leftDistance;
        m_rightDistance = rightDistance;

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.driveTrainSRX);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        useOldMethods = true;
        endMoveLimit = 0;
        cruiseVel = 0;
        accel = 0;
    }
    
    public TestArcDrive(double leftDistance, double rightDistance, boolean startSequence, int accel, int vel, int endLimit) {
        requires(Robot.driveTrainSRX);

        this.useOldMethods = false;
        
        this.m_leftDistance = leftDistance;
    	this.m_rightDistance = rightDistance;
    	this.startSequence = startSequence;
        this.accel = accel;
        this.cruiseVel = vel;
        this.endMoveLimit = endLimit;
    }
    
    // Called just before this Command runs the first time
    @Override
    protected void initialize() {
    	if (useOldMethods)
    	{
        	if (Robot.gameData == 'L') {
        		Robot.driveTrainSRX.goToUsingMM(m_leftDistance, m_rightDistance);
        	}
        	else {
        		Robot.driveTrainSRX.goToUsingMM(m_rightDistance, m_leftDistance);
        	}    		
    	}
    	else {
        	if (Robot.gameData == 'L') {
        		Robot.driveTrainSRX.goToUsingMM(m_leftDistance, m_rightDistance, startSequence, accel, cruiseVel);
        	}
        	else {
        		Robot.driveTrainSRX.goToUsingMM(m_rightDistance, m_leftDistance, startSequence, accel, cruiseVel);
        	}      		
    	}

    }

    // Called repeatedly when this Command is scheduled to run
    @Override
    protected void execute() {
    	Robot.driveTrainSRX.pingDifferentialDrive();
    }

    // Make this return true when this Command no longer needs to run execute()
    @Override
    protected boolean isFinished() {
        return Robot.driveTrainSRX.moveComplete(endMoveLimit);   
    }

    // Called once after isFinished returns true
    @Override
    protected void end() {
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    @Override
    protected void interrupted() {
    }
}
