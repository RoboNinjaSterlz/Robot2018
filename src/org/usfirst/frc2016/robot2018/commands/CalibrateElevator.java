// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2016.robot2018.commands;
import edu.wpi.first.wpilibj.RobotState;
import edu.wpi.first.wpilibj.command.Command;

import org.usfirst.frc2016.robot2018.Robot;

/**
 *
 */
public class CalibrateElevator extends Command {
	private int SECONDS_TO_TIMEOUT = 2; // was originally 3
	private final double DELAYPERCOUNT = .02;
	private int waitCounter;
	
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public CalibrateElevator() {
    	
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        setInterruptible(false);
        setRunWhenDisabled(true);

        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    protected void initialize() {
    	waitCounter = 0;
    	Robot.gearElevator.startCalibrate();
    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
    	if (RobotState.isEnabled()) {
    	    waitCounter++;
    }                   
    	if (!Robot.gearElevator.isCalibrated()) {
    		Robot.gearElevator.doCalibrate();
    		
    		if ((int)(waitCounter*DELAYPERCOUNT) > SECONDS_TO_TIMEOUT) {
    			Robot.gearElevator.completeCalibration();
    		}
    	}
    }

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        return ( Robot.gearElevator.isCalibrated()); 
    }

    // Called once after isFinished returns true
    protected void end() {
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    }
}
