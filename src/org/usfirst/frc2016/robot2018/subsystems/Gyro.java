// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2016.robot2018.subsystems;

import org.usfirst.frc2016.robot2018.Robot;


import edu.wpi.first.wpilibj.DriverStation;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import com.kauailabs.navx.frc.AHRS;

import edu.wpi.first.wpilibj.SPI;
/**
 *
 */
public class Gyro extends Subsystem {
	
	public final double gyroP = 0.01;
	public final double TURN_MAX = 0.6;
	private final String GYRO_ANGLE = "Gyro Angle";
	private final String GYRO_ROLL = "Gyro Roll";

	//ADIS16448_IMU imu;
	//XRS450_Gyro digGyro;
	AHRS navxGyro;
	
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS


    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public Gyro() {
    	//digGyro = new ADXRS450_Gyro();
    	//digGyro.calibrate();
    	try {
            /* Communicate w/navX-MXP via the MXP SPI Bus.                                     */
            /* Alternatively:  I2C.Port.kMXP, SerialPort.Port.kMXP or SerialPort.Port.kUSB     */
            /* See http://navx-mxp.kauailabs.com/guidance/selecting-an-interface/ for details. */
            navxGyro = new AHRS(SPI.Port.kMXP); 
        } catch (RuntimeException ex ) {
            DriverStation.reportError("Error instantiating navX-MXP:  " + ex.getMessage(), true);
        } 
    	reset();
    	/*
        DriverStation.reportError("About to init ADIS16448", false);
        imu = new ADIS16448_IMU();

        if (imu == null) {
        	// init failed
            DriverStation.reportError("could not find ADIS16448", false);
        }
    	 */
    }
    
    public void periodic() {
        //SmartDashboard.putData("IMU", imu);
    	//artDashboard.putNumber("Gyro Heading", digGyro.getAngle());
    	SmartDashboard.putNumber("Gyro Heading", navxGyro.getAngle());
    	SmartDashboard.putNumber("Roll",navxGyro.getRoll() );
    }
    
    public void addTelemetryHeaders() {
    	Robot.telem.addColumn(GYRO_ANGLE);
    	Robot.telem.addColumn(GYRO_ROLL);
    }	

    public void writeTelemetry() {
    	Robot.telem.saveDouble(GYRO_ANGLE, getAngle());
    	Robot.telem.saveDouble(GYRO_ROLL, getRoll());
    }
    public void calibrate() {
    	//imu.calibrate();
    	//gGyro.calibrate();
    	// NavX doesn't appear to have a calibrate
    }
    
/*
    public double getAngle() {
    	double angle;
    	//turn digGyro.getAngle();
    	angle = navxGyro.getAngle();
    	if (angle > 180) {
    		angle = angle-360;
    	}
    	return angle;
    }
 */
    
    public double getAngle() {
    	double angle;
    	//turn digGyro.getAngle();
    	angle = navxGyro.getAngle();
//    	if (angle > 180) {
//    		angle = angle-360;
//    	}
    	return angle;
    }

    public double getRoll() {
    	return navxGyro.getRoll();
    	
    		
    	}
    	 
    public void reset() {
    	//gGyro.reset();
    	//navxGyro.zeroYaw();
    	navxGyro.reset();
    }
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }
}

