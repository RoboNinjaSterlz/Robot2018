// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2016.robot2018.subsystems;

import org.usfirst.frc2016.robot2018.RobotMap;
import org.usfirst.frc2016.robot2018.commands.*;

import edu.wpi.first.wpilibj.command.Subsystem;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.PowerDistributionPanel;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 *
 */
public class CurrentMonitor extends Subsystem {
	private final int
	            leftDrivePort1=0,
			    leftDrivePort2=1,
			    leftDrivePort3=2;
	private final int
	            rightDrivePort1=3,
	            rightDrivePort2=4,
	            rightDrivePort3=5;
	
	private final int
				winchPort1 = 6,
				winchPort2 = 7;

	private boolean driveLeftFail = false,
			        driveRightFail = false;
	
	private boolean winchFail1 = false,
			        winchFail2 = false;
	
	private double driveTrainThrottleLeft, driveTrainThrottleRight;
	private double winchThrottle;
	
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final PowerDistributionPanel powerDistributionPanel1 = RobotMap.currentMonitorPowerDistributionPanel1;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    @Override
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }

    @Override
    public void periodic() {
        // Put code here to be run every loop
    	// Drive train
    	if (driveTrainThrottleLeft != 0) {
    		if (powerDistributionPanel1.getCurrent(leftDrivePort1) == 0 ||
    	        powerDistributionPanel1.getCurrent(leftDrivePort2) ==0 ||
    	        powerDistributionPanel1.getCurrent(leftDrivePort3) == 0 ) {
    			driveLeftFail = true;
    		}
/*
    		else {
    			driveLeftFail = false;
    		}

    	}
    	else {
    		driveLeftFail = false;
    	}
*/
    	}
    	if (driveTrainThrottleRight !=0) {
    		if (powerDistributionPanel1.getCurrent(rightDrivePort1) == 0 ||
    	    	powerDistributionPanel1.getCurrent(rightDrivePort2) ==0 ||
    	    	powerDistributionPanel1.getCurrent(rightDrivePort3) == 0 ) {
    	    	// Signal wiring fault
    			driveRightFail = true;
    	   	}
    	}
    	/*  		else {
    			driveRightFail = false;
    		}
    	}
    	else {
    		driveRightFail = false;
    	}
*/
    
    	if (winchThrottle !=0) {
    		if (powerDistributionPanel1.getCurrent(winchPort1) == 0 ) {
    			// Signal wiring fault
    			winchFail1 = true;
    		}
    	}
  /*  		else {
    			winchFail1 = false;
    		}
    	}
    	else {
    		winchFail2 = false;
    	}	
*/
    	if (winchThrottle !=0) {
    		if (powerDistributionPanel1.getCurrent(winchPort2) == 0 ) {
    			// Signal wiring fault
    			winchFail2 = true;
    		}
    	}
  /*  		else {
    			winchFail2 = false;
    		}
    	}
    	else {
    		winchFail2 = false;
    	}	
    }
*/
    }
    	// Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void driveTrainCurrentReport(double leftThrottle, double rightThrottle) {
    	driveTrainThrottleLeft=leftThrottle;
    	driveTrainThrottleRight=rightThrottle;
    }
    
    public void winchCurrentReport(double Throttle) {
    	winchThrottle = Throttle;
    }

    public boolean driveLeftFault() {
    	return(driveLeftFail);
    }
    
    public boolean driveRightFault() {
    	return(driveRightFail);
    }
    
    public boolean winchFault1() {
    	return(winchFail1);
    }
    
    public boolean winchFault2() {
    	return(winchFail2);
    }
}

